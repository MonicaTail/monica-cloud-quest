<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>☁️ Monica's Cloud Quest ☁️</title>
    <link rel="icon" href="favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />
    <style>
        /* === Page Styles === */
        body {
            background: linear-gradient(to bottom, #fff9db, #f7e7a7);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            text-align: center;
            padding: 50px;
            overflow-x: hidden;
            color: #003366;
            user-select: none;
            min-height: 100vh;
            transition: background 1s ease;
        }
        body.rainy {
            background: linear-gradient(to bottom, #546a7b, #a0b8ca);
            filter: brightness(0.85);
        }
        body.sunny {
            background: linear-gradient(to bottom, #fff9db, #f7e7a7);
            filter: brightness(1.1);
        }
        h1 {
            font-size: 3em;
            margin-bottom: 20px;
            animation: popIn 2s ease;
            text-shadow: 0 0 15px #4fa1d8;
        }
        @keyframes popIn {
            0% { transform: scale(0.5); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }
        /* Buttons styling */
        button {
            padding: 14px 28px;
            margin: 12px;
            font-size: 16px;
            background: linear-gradient(145deg, #a7d7f9, #89c2f7);
            color: #003366;
            border: 2px solid #4fa1d8;
            border-radius: 18px;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
            box-shadow: 0 5px 12px rgba(0, 0, 0, 0.15);
            font-weight: 600;
            letter-spacing: 0.8px;
            text-transform: uppercase;
            user-select: none;
            position: relative;
            overflow: hidden;
        }
        button:hover:not(:disabled) {
            background: linear-gradient(145deg, #89c2f7, #a7d7f9);
            transform: scale(1.1) rotate(-1deg);
            box-shadow: 0 10px 25px rgba(0, 119, 204, 0.6);
        }
        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            box-shadow: none;
            color: #666;
        }
        /* Back and refresh buttons styles */
        .back-btn {
            background: #bbb !important;
            color: #222 !important;
        }
        .refresh-btn {
            background: #ffd54f !important;
            color: #333 !important;
            border-color: #ffca28 !important;
        }
        /* Hidden class */
        .hidden {
            display: none;
        }
        /* Log area styles */
        #log {
            text-align: left;
            margin-top: 30px;
            background: transparent;
            padding: 25px 30px;
            border-radius: 15px;
            max-width: 840px;
            margin-left: auto;
            margin-right: auto;
            box-shadow: none;
            min-height: 220px;
            font-size: 1.1em;
            color: #003366;
            user-select: text;
            position: relative;
            z-index: 10;
        }
        /* Victory message styles */
        .victory {
            color: #1b5e20;
            font-weight: bold;
            margin-top: 40px;
            font-size: 1.8em;
            text-shadow: 0 0 15px #00cc00;
            animation: glow 1.5s ease-in-out infinite alternate;
            max-width: 840px;
            margin-left: auto;
            margin-right: auto;
            background: #e6ffe6cc;
            padding: 30px;
            border-radius: 18px;
            box-shadow: 0 0 30px #00cc00aa;
            position: relative;
            overflow: hidden;
            z-index: 10;
        }
        @keyframes glow {
            from {
                text-shadow: 0 0 15px #00cc00, 0 0 25px #00cc00;
            }
            to {
                text-shadow: 0 0 25px #00ff00, 0 0 35px #00ff00;
            }
        }
        /* Avatar selection styles */
        .avatar-selection {
            display: flex;
            justify-content: center;
            gap: 40px;
            flex-wrap: wrap;
            margin: 35px auto 15px auto;
            position: relative;
            z-index: 10;
        }
        .avatar {
            cursor: pointer;
            border: 5px solid transparent;
            border-radius: 50%;
            width: 140px;
            height: 140px;
            transition: all 0.35s ease-in-out;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
            filter: drop-shadow(0 0 3px #77bfff);
            user-select: none;
            position: relative;
            background: #d0e8ff;
        }
        .avatar:hover, .avatar.selected {
            transform: scale(1.15) rotate(-5deg);
            border-color: #0077cc;
            box-shadow: 0 0 28px rgba(0, 119, 204, 0.85);
            filter: drop-shadow(0 0 12px #3399ff);
            background: linear-gradient(145deg, #89c2f7, #a7d7f9);
        }
        /* Character message styles */
        #character-message {
            font-style: italic;
            color: #004d80;
            margin-top: 15px;
            font-size: 1.15em;
            min-height: 40px;
            max-width: 720px;
            margin-left: auto;
            margin-right: auto;
            user-select: none;
            transition: all 0.3s ease-in-out;
            position: relative;
            z-index: 10;
        }
        /* Option buttons styles */
        #options button {
            display: block;
            width: 100%;
            max-width: 400px;
            margin: 12px auto;
            font-size: 1.1em;
            border-radius: 22px;
            background: linear-gradient(135deg, #9cd3f5, #5fa9f5);
            color: #002244;
            font-weight: 700;
            letter-spacing: 0.9px;
            box-shadow: 0 6px 18px rgba(45, 118, 205, 0.7);
            transition: transform 0.25s ease, box-shadow 0.25s ease;
            user-select: none;
            position: relative;
            overflow: hidden;
        }
        #options button:hover:not(:disabled) {
            transform: scale(1.15) rotate(1deg);
            box-shadow: 0 10px 28px rgba(0, 120, 255, 0.9);
            background: linear-gradient(135deg, #5fa9f5, #9cd3f5);
            color: #001a3c;
        }
        /* Cloud Button style (interactive cloud) */
        .cloud-button {
            font-size: 4rem;
            cursor: pointer;
            background: transparent;
            border: none;
            transition: transform 0.3s ease, filter 0.3s ease;
            user-select: none;
            color: #3399ff;
            filter: drop-shadow(0 0 8px #66b3ff);
            margin: 10px auto 30px auto;
            display: inline-block;
            position: relative;
            z-index: 10;
        }
        .cloud-button:hover {
            transform: scale(1.3) rotate(-10deg);
            color: #66ccff;
            filter: drop-shadow(0 0 20px #99ddff);
        }
        /* Floating clouds at top styles */
        .floating-clouds {
            position: fixed;
            top: 10px;
            left: 0;
            width: 100%;
            height: 50px;
            pointer-events: none;
            overflow: visible;
            z-index: 5;
        }
        .floating-clouds .cloud {
            position: absolute;
            background: #ffffffcc;
            border-radius: 50% / 60%;
            padding: 10px 25px;
            font-weight: bold;
            color: #336699;
            box-shadow: 0 0 15px #ccc;
            animation: floatClouds 6s ease-in-out infinite alternate;
            font-size: 1.2rem;
            user-select: none;
            filter: drop-shadow(0 0 6px #a0c8ff);
            cursor: default;
            white-space: nowrap;
        }
        .floating-clouds .cloud:nth-child(odd) {
            animation-duration: 8s;
        }
        .floating-clouds .cloud:nth-child(1) { top: 5px; left: 6%; }
        .floating-clouds .cloud:nth-child(2) { top: 12px; left: 23%; }
        .floating-clouds .cloud:nth-child(3) { top: 8px; left: 38%; }
        .floating-clouds .cloud:nth-child(4) { top: 5px; left: 52%; }
        .floating-clouds .cloud:nth-child(5) { top: 12px; left: 68%; }
        .floating-clouds .cloud:nth-child(6) { top: 8px; left: 83%; }
        @keyframes floatClouds {
            0% { transform: translateX(0); }
            100% { transform: translateX(50px); }
        }
        /* Rain effect styles */
        #rain {
            pointer-events: none;
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            overflow: hidden;
            z-index: 9999;
            mix-blend-mode: screen;
        }
        .raindrop {
            position: absolute;
            bottom: 100%;
            width: 2px;
            height: 15px;
            background: #a3c1e0cc;
            animation: fall linear infinite;
            opacity: 0.6;
            border-radius: 50%;
            filter: drop-shadow(0 0 3px #a0b8ca);
        }
        @keyframes fall {
            to {
                transform: translateY(100vh);
                opacity: 0;
            }
        }
        /* Sun styles */
        #sunrays {
            position: fixed;
            top: 70px;
            right: 20px;
            width: 100px;
            height: 100px;
            background: #ffcc00;
            border-radius: 50%;
            box-shadow: 0 0 10px rgba(255, 204, 0, 0.7);
            z-index: 9999;
            pointer-events: none;
        }
        @keyframes fallDown {
            0% { top: 70px; opacity: 1; transform: translateY(0); }
            100% { top: 150vh; opacity: 0; transform: translateY(200px); }
        }
        @keyframes blowUp {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(2.5); opacity: 0; }
            100% { transform: scale(3); opacity: 0; }
        }
        .sun-fall {
            animation: fallDown 2s forwards;
        }
        .sun-explode {
            animation: blowUp 1s forwards;
        }
        /* Butterflies styles */
        #butterflies {
            position: fixed;
            top: 10%;
            left: 0;
            width: 100%;
            height: 80vh;
            pointer-events: none;
            overflow: visible;
            z-index: 1000;
        }
        .butterfly {
            position: absolute;
            width: 40px;
            height: 40px;
            background: url('https://cdn-icons-png.flaticon.com/512/5426/5426522.png') no-repeat center center / contain;
            animation: flyAround 12s linear infinite;
            opacity: 0.85;
            filter: drop-shadow(0 0 4px #faa);
            user-select: none;
            pointer-events: none;
        }
        @keyframes flyAround {
            0% { transform: translate(0, 0) rotate(0deg); }
            25% { transform: translate(30vw, -10vh) rotate(45deg); }
            50% { transform: translate(60vw, 5vh) rotate(0deg); }
            75% { transform: translate(40vw, 15vh) rotate(-45deg); }
            100% { transform: translate(0, 0) rotate(0deg); }
        }
        /* Bubble on top with "Putty" */
        .top-bubble {
            position: fixed;
            top: 70px;
            left: 50%;
            transform: translateX(-50%);
            background: #ffe0b2;
            padding: 15px 25px;
            border-radius: 35px;
            font-weight: bold;
            font-size: 1.2em;
            box-shadow: 0 0 15px #ccc;
            z-index: 100;
            border: 3px solid #ffb74d;
            display: none; /* Hidden by default */
        }
        /* Chatbot Styles */
        #monikat-chat-container {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 300px;
            height: 400px;
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            display: flex; /* Changed to flex to be always visible */
            flex-direction: column;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            z-index: 999;
            border-radius: 8px;
            overflow: hidden;
        }

        #monikat-chat-header {
            background: linear-gradient(145deg, #a7d7f9, #89c2f7);
            color: #003366;
            padding: 10px;
            font-size: 1.1em;
            font-weight: bold;
            text-align: center;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            cursor: default;
            user-select: none;
        }

        #monikat-chat-log {
            flex-grow: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: white;
            word-wrap: break-word;
            border-bottom: 1px solid #eee;
        }

        #monikat-chat-log p {
            margin: 5px 0;
            line-height: 1.4;
        }

        /* Styles for Monikat's message */
        #monikat-chat-log p strong {
            color: #0056b3;
        }
        /* Styles for user's message */
        #monikat-chat-log p.user-message {
            text-align: right;
            color: #1b5e20;
        }


        #monikat-chat-input-area {
            display: flex;
            padding: 10px;
            background-color: #f0f0f0;
        }

        #chat-input {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-right: 5px;
            font-size: 0.9em;
            background-color: white;
            color: #333;
        }

        #send-button {
            padding: 8px 12px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background-color 0.2s ease;
        }

        #send-button:hover {
            background-color: #0056b3;
        }

        .java-code-display {
            background-color: #333;
            color: #eee;
            font-family: 'Consolas', 'Monaco', monospace;
            padding: 15px;
            border-radius: 8px;
            margin-top: 15px;
            white-space: pre-wrap;
            text-align: left;
            overflow-x: auto;
        }

        /* Certificate Styles */
        #certificate {
            background: linear-gradient(135deg, #f0f9ff, #cde7ff);
            border: 10px solid #0077cc;
            padding: 40px;
            margin-top: 50px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            max-width: 700px;
            margin-left: auto;
            margin-right: auto;
            text-align: center;
            font-family: 'Georgia', serif;
            color: #003366;
            display: none; /* Hidden by default */
            z-index: 100;
            position: relative;
        }
        #certificate h2 {
            font-size: 2.5em;
            color: #0056b3;
            margin-bottom: 20px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        #certificate p {
            font-size: 1.2em;
            margin-bottom: 15px;
        }
        #certificate .name {
            font-size: 1.8em;
            font-weight: bold;
            margin: 20px 0;
            color: #d9534f; /* A nice contrasting color */
            text-shadow: 1px 1px 3px rgba(0,0,0,0.1);
        }
        #certificate .score {
            font-size: 1.5em;
            margin-top: 25px;
            color: #28a745;
            font-weight: bold;
        }
        #certificate img {
            width: 150px;
            height: auto;
            margin-top: 30px;
            border-radius: 50%;
            border: 4px solid #fff;
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body class="sunny">
    <div class="floating-clouds" aria-hidden="true">
        <div class="cloud">Java</div>
        <div class="cloud">Git</div>
        <div class="cloud">Oracle</div>
        <div class="cloud">Ports</div>
        <div class="cloud">NetBeans</div>
        <div class="cloud">TigerVNC</div>
    </div>

    <div class="top-bubble" id="puttyBubble">Putty</div>

    <h1>☁️ Monica's Cloud Quest ☁️</h1>

    <audio id="bg-music" loop preload="auto" volume="1.0">
        <source src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3" type="audio/mpeg" />
    </audio>

    <audio id="correct-sound" src="https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg" preload="auto"></audio>
    <audio id="thunder-sound" src="https://actions.google.com/sounds/v1/cartoon/cartoon_boing.ogg" preload="auto"></audio>
    <audio id="awesome-choice" src="https://actions.google.com/sounds/v1/cartoon/concussive_hit_guitar_boing.ogg" preload="auto"></audio>
    <audio id="rain-sound" src="https://cdn.pixabay.com/download/audio/2021/08/04/audio_3a1c1dd90d.mp3?filename=rain-loop-11488.mp3" loop preload="auto"></audio>
    <audio id="sunny-sound" src="https://cdn.pixabay.com/download/audio/2023/08/30/audio_4e98b46e01.mp3?filename=happy-music-12666.mp3" loop preload="auto"></audio>

    <div id="rain" aria-hidden="true"></div>

    <div id="sunrays" aria-hidden="true" aria-label="Sun rays">
        <div class="ray" style="transform: rotate(0deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(30deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(60deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(90deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(120deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(150deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(180deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(210deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(240deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(270deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(300deg) translateX(90px);"></div>
        <div class="ray" style="transform: rotate(330deg) translateX(90px);"></div>
    </div>

    <div id="butterflies" aria-hidden="true"></div>

    <div id="log" role="main" aria-live="polite" aria-atomic="true" tabindex="0"></div>

    <div class="victory hidden" id="victory" role="alert" aria-live="assertive"></div>

    <div id="certificate" class="hidden">
        <h2>Certificate of Completion</h2>
        <p>This certifies that</p>
        <p class="name">A Cloud Quest Enthusiast</p>
        <p>has successfully completed</p>
        <p><strong>Monica's Cloud Quest</strong></p>
        <p class="score">With a score of <span id="final-score">0</span> out of <span id="total-questions">0</span> questions correct!</p>
        <img src="https://img.icons8.com/plasticine/100/medal2.png" alt="Award Medal">
        <p style="margin-top: 30px; font-size: 0.9em; font-style: italic;">Congratulations on your cloud learning journey!</p>
    </div>

    <button id="start-btn" class="cloud-button" aria-label="Start the game">☁️ Start</button>

    <div id="control-buttons" style="margin-top: 25px; display:none;">
        <button id="back-btn" class="back-btn" aria-label="Go back to previous question">Back</button>
        <button id="refresh-btn" class="refresh-btn" aria-label="Restart the game">Restart</button>
    </div>

    <div id="monikat-chat-container">
        <div id="monikat-chat-header">Monikat Chat</div>
        <div id="monikat-chat-log">
            <p><strong>Monikat:</strong> Welcome to Monica's Cloud Quest! Ask me anything about Oracle Cloud, Java, or the game! Try typing 'hello'.</p>
        </div>
        <div id="monikat-chat-input-area">
            <input type="text" id="chat-input" placeholder="Type your message...">
            <button id="send-button">Send</button>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
    <script>
        // Variables & Elements
        const log = document.getElementById('log');
        const victory = document.getElementById('victory');
        const startBtn = document.getElementById('start-btn');
        const backBtn = document.getElementById('back-btn');
        const refreshBtn = document.getElementById('refresh-btn');
        const controlButtons = document.getElementById('control-buttons');

        const bgMusic = document.getElementById('bg-music');
        const correctSound = document.getElementById('correct-sound');
        const thunderSound = document.getElementById('thunder-sound');
        const awesomeChoice = document.getElementById('awesome-choice');
        const rainSound = document.getElementById('rain-sound');
        const sunnySound = document.getElementById('sunny-sound');

        const rainContainer = document.getElementById('rain');
        const butterfliesContainer = document.getElementById('butterflies');

        const sun = document.getElementById('sunrays');

        // New elements for the Monikat Chatbot
        const monikatChatContainer = document.getElementById('monikat-chat-container');
        const monikatChatLog = document.getElementById('monikat-chat-log');
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');

        // Certificate elements
        const certificateDiv = document.getElementById('certificate');
        const finalScoreSpan = document.getElementById('final-score');
        const totalQuestionsSpan = document.getElementById('total-questions');


        let currentLevel = 0;
        let score = 0;
        let isRaining = false;
        let chatHistory = []; // To store Monikat chat messages

        // Levels with added new content
        const levels = [
            {
                question: "Which is the best way to start with Oracle Cloud?",
                answers: [
                    { text: "Use Facebook Login", correct: false },
                    { text: "Create an Oracle Cloud account", correct: true },
                    { text: "Download Oracle NetBeans", correct: false },
                    { text: "Use AWS instead", correct: false }
                ],
                hint: "You need an official Oracle account first."
            },
            {
                question: "Why did Monica create 2 VMs in Oracle Cloud?",
                answers: [
                    { text: "First VM was too small to run everything", correct: true },
                    { text: "Wanted a backup VM", correct: false },
                    { text: "Just to experiment with multiple VMs", correct: false },
                    { text: "Because of cost savings", correct: false }
                ],
                hint: "Capacity was the issue."
            },
            {
                question: "What remote desktop tool did Monica install on her VMs?",
                answers: [
                    { text: "TigerVNC", correct: true },
                    { text: "TeamViewer", correct: false },
                    { text: "AnyDesk", correct: false },
                    { text: "Remote Desktop Protocol (RDP)", correct: false }
                ],
                hint: "Starts with 'Tiger'."
            },
            {
                question: "How did Monica handle opening ports in Oracle Cloud?",
                answers: [
                    { text: "Added specific ports for services", correct: true },
                    { text: "Blocked all ports for security", correct: false },
                    { text: "Left default ports open", correct: false },
                    { text: "Didn't configure ports", correct: false }
                ],
                hint: "She customized port access."
            },
            {
                question: "Which tools did Monica learn to install on her VMs?",
                answers: [
                    { text: "TigerVNC, Git, Java Learning", correct: true },
                    { text: "Docker, Kubernetes", correct: false },
                    { text: "Photoshop, Illustrator", correct: false },
                    { text: "VMware, Hyper-V", correct: false }
                ],
                hint: "Includes version control and remote desktop."
            },
            {
                question: "Monica learned to code Java. Which IDE is popular for Java development?",
                answers: [
                    { text: "NetBeans", correct: true },
                    { text: "Visual Studio Code", correct: false },
                    { text: "Sublime Text", correct: false },
                    { text: "PyCharm", correct: false }
                ],
                hint: "Oracle owns this IDE."
            },
            {
                question: "Let's try a simple Java demo! Type exactly: System.out.println(\"Hello, Oracle!\");",
                demo: true, // This flag indicates a code demo question
                hint: "The correct code is: `System.out.println(\"Hello, Oracle!\");` Match capitalization, punctuation exactly.",
                correctDemoInput: 'System.out.println("Hello, Oracle!");',
                demoSuccessMsg: "Great job! You've run your first Java print statement!"
            },
            // New Levels related to Putty
            {
                question: "What is a common reason for a critical error after trying to log into Putty?",
                answers: [
                    { text: "Need an SSH private key", correct: true },
                    { text: "Incorrect username", correct: false },
                    { text: "Wrong IP address", correct: false }
                ],
                hint: "Think about SSH key authentication."
            },
            {
                question: "Why might the private key not work in Putty?",
                answers: [
                    { text: "It's not configured correctly and needs proper extension", correct: true },
                    { text: "The server is down", correct: false },
                    { text: "The password is wrong", correct: false }
                ],
                hint: "Configuration and format are key."
            },
            {
                question: "What is the proper extension for a Putty private key?",
                answers: [
                    { text: ".ppk", correct: true },
                    { text: ".ocp", correct: false },
                    { text: ".notta", correct: false },
                    { text: ".tgif", correct: false }
                ],
                hint: "It's a specific format for Putty keys."
            },
            {
                question: "Fun fact: What's the difference between Putty and TigerVNC?",
                answers: [
                    { text: "Putty is for SSH, TigerVNC is for remote desktop", correct: true },
                    { text: "They are the same tool", correct: false },
                    { text: "Putty is a browser plugin", correct: false },
                    { text: "TigerVNC is for email", correct: false }
                ],
                hint: "They serve different remote access purposes."
            },
            {
                question: "Create a simple Java calculator that adds two numbers. Enter your code, then input the numbers when prompted.",
                demo: true,
                hint: "The correct Java code is:\n```java\nimport java.util.Scanner;\n\npublic class Calculator {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter first number:\");\n        int num1 = scanner.nextInt();\n        System.out.println(\"Enter second number:\");\n        int num2 = scanner.nextInt();\n        int sum = num1 + num2;\n        System.out.println(\"The sum is: \" + sum);\n        scanner.close();\n    }\n}\n```",
                correctDemoInput: `import java.util.Scanner;

public class Calculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter first number:");
        int num1 = scanner.nextInt();
        System.out.println("Enter second number:");
        int num2 = scanner.nextInt();
        int sum = num1 + num2;
        System.out.println("The sum is: " + sum);
        scanner.close();
    }
}`,
                demoSuccessMsg: "Great! You've created a simple Java calculator! (Input processing is simulated for this demo)"
            },
            {
                question: "Chat with Monikat: Ask her about Oracle Cloud, Java, or anything else about Monica's Quest!",
                chat: true, // This flag indicates a chat level
                hint: "Type your message and click Send. Ask 'What is Oracle Cloud?' or 'Tell me about Java'.",
                chatDuration: 15000 // Chat for 15 seconds, then auto-advance
            }
        ];

        // Sun animation functions
        function sunFall() {
            sun.classList.remove('sun-explode');
            sun.classList.add('sun-fall');
        }
        function sunBlowUp() {
            sun.classList.remove('sun-fall');
            sun.classList.add('sun-explode');
        }
        function resetSun() {
            sun.classList.remove('sun-fall', 'sun-explode');
            sun.style.top = '70px';
            sun.style.transform = '';
            sun.style.opacity = '';
        }

        // Rain effect functions
        function createRainDrops(numDrops = 50) {
            rainContainer.innerHTML = '';
            for (let i = 0; i < numDrops; i++) {
                const drop = document.createElement('div');
                drop.className = 'raindrop';
                drop.style.left = Math.random() * 100 + 'vw';
                drop.style.animationDuration = (0.7 + Math.random() * 0.8) + 's';
                drop.style.animationDelay = (Math.random() * 5) + 's';
                drop.style.opacity = (0.3 + Math.random() * 0.7).toFixed(2);
                drop.style.width = (1 + Math.random() * 3) + 'px';
                drop.style.height = (8 + Math.random() * 12) + 'px';
                rainContainer.appendChild(drop);
            }
        }

        function startRain() {
            if (!isRaining) {
                createRainDrops(80);
                rainSound.volume = 0.15;
                rainSound.play();
                isRraining = true;
                document.body.classList.add('rainy');
                document.body.classList.remove('sunny');
                sunnySound.pause();
            }
        }

        function stopRain() {
            if (isRaining) {
                rainContainer.innerHTML = '';
                rainSound.pause();
                isRaining = false;
                document.body.classList.remove('rainy');
                document.body.classList.add('sunny');
                sunnySound.volume = 0.15;
                sunnySound.play();
            }
        }

        // Butterflies creation
        function createButterflies(num = 6) {
            butterfliesContainer.innerHTML = '';
            for (let i = 0; i < num; i++) {
                const butterfly = document.createElement('div');
                butterfly.className = 'butterfly';
                butterfly.style.top = `${Math.random() * 70 + 10}vh`;
                butterfly.style.left = `${Math.random() * 100}vw`;
                butterfly.style.animationDelay = `${Math.random() * 12}s`;
                butterfliesContainer.appendChild(butterfly);
            }
        }

        createButterflies();

        // Show level function
        function showLevel() {
            stopRain(); // Ensure no rain when a new level starts
            resetSun(); // Reset sun position at the start of each level

            if (currentLevel >= levels.length) {
                showVictoryScreen();
                return;
            }

            const level = levels[currentLevel];
            log.innerHTML = `<p>${level.question}</p>`;
            appendHintButton(level.hint);

            if (level.demo) {
                // Display the correct code for the demo
                log.innerHTML += `<p><strong>Provide the following code:</strong></p><pre class="java-code-display">${escapeHTML(level.correctDemoInput)}</pre>`;
                log.innerHTML += `<button id="understand-code-btn" class="main-btn">I understand the code</button>`;
                document.getElementById('understand-code-btn').onclick = () => {
                    score++;
                    displayMessage(level.demoSuccessMsg, 'success');
                    playCorrectSound();
                    setTimeout(() => {
                        currentLevel++;
                        showLevel();
                    }, 2000);
                };
            } else if (level.chat) {
                log.innerHTML += `<p>Use the chatbox below to talk to Monikat!</p>`;
                monikatChatContainer.style.display = 'flex'; // Ensure chat is visible
                chatInput.focus(); // Focus on chat input for convenience

                let chatTimer = setTimeout(() => {
                    displayMessage("Time's up for chatting! Moving to the next question.", 'info');
                    monikatChatContainer.style.display = 'none'; // Hide chat
                    currentLevel++;
                    showLevel();
                }, level.chatDuration);

                // For the chat demo, we just need to confirm the user interacted
                // You might want more sophisticated chat completion logic here
                chatInput.onkeydown = (event) => {
                    if (event.key === 'Enter') {
                        sendButton.click();
                    }
                };
                sendButton.onclick = () => {
                    if (chatInput.value.trim() !== '') {
                        addMessageToChatLog('User', chatInput.value, 'user-message');
                        // Simulate Monikat's response
                        let monikatResponse = getMonikatResponse(chatInput.value);
                        addMessageToChatLog('Monikat', monikatResponse);
                        chatInput.value = ''; // Clear input

                        // If user sent a message, reset timer for demo completion
                        clearTimeout(chatTimer);
                        chatTimer = setTimeout(() => {
                            displayMessage("Great conversation! Moving to the next question.", 'success');
                            monikatChatContainer.style.display = 'none'; // Hide chat
                            score++; // Grant a point for participating in chat
                            currentLevel++;
                            showLevel();
                        }, level.chatDuration / 2); // Shorter follow-up time
                    }
                };

            } else {
                const optionsDiv = document.createElement('div');
                optionsDiv.id = 'options';
                level.answers.forEach(answer => {
                    const button = document.createElement('button');
                    button.textContent = answer.text;
                    button.onclick = () => checkAnswer(answer.correct);
                    optionsDiv.appendChild(button);
                });
                log.appendChild(optionsDiv);
            }

            // Show control buttons only after start
            controlButtons.style.display = 'block';
            updateButtons();
        }

        // Add a function to escape HTML for displaying code
        function escapeHTML(str) {
            const div = document.createElement('div');
            div.appendChild(document.createTextNode(str));
            return div.innerHTML;
        }

        // Monikat Chatbot Logic
        function addMessageToChatLog(sender, message, className = '') {
            const p = document.createElement('p');
            p.className = className;
            const strong = document.createElement('strong');
            strong.textContent = sender + ': ';
            p.appendChild(strong);
            p.appendChild(document.createTextNode(message));
            monikatChatLog.appendChild(p);
            monikatChatLog.scrollTop = monikatChatLog.scrollHeight; // Auto-scroll to bottom
            chatHistory.push({ sender, message }); // Store chat history
        }

        function getMonikatResponse(userMessage) {
            userMessage = userMessage.toLowerCase();
            if (userMessage.includes('hello') || userMessage.includes('hi')) {
                return "Hello there! How can I help you on Monica's Cloud Quest?";
            } else if (userMessage.includes('oracle cloud')) {
                return "Oracle Cloud Infrastructure (OCI) offers a comprehensive suite of cloud computing services. It's known for its strong performance and enterprise-grade features!";
            } else if (userMessage.includes('java')) {
                return "Java is a powerful, object-oriented programming language. It's widely used for enterprise applications, Android development, and big data.";
            } else if (userMessage.includes('monica')) {
                return "Monica is your guide on this quest! She's learning about cloud technologies and is excited to share her journey.";
            } else if (userMessage.includes('game') || userMessage.includes('quest')) {
                return "This game is designed to teach you about Oracle Cloud and related technologies in a fun, interactive way!";
            } else if (userMessage.includes('putty')) {
                return "PuTTY is a free and open-source terminal emulator, serial console and network file transfer application. It supports several network protocols, including SCP, SSH, Telnet, rlogin, and raw socket connection.";
            } else if (userMessage.includes('tigervnc')) {
                return "TigerVNC is a high-performance, platform-neutral implementation of VNC (Virtual Network Computing). It allows you to control the graphical desktop of a remote computer.";
            } else if (userMessage.includes('port') || userMessage.includes('ports')) {
                return "In networking, a port is an endpoint of a connection. Opening ports on a VM allows specific types of network traffic to reach services running on that VM.";
            }
            else {
                return "That's an interesting question! I'm still learning, but I can help with topics like Oracle Cloud, Java, Putty, or the game itself.";
            }
        }


        // Game Logic Functions
        function checkAnswer(isCorrect) {
            if (isCorrect) {
                displayMessage('Correct! Excellent job!', 'success');
                score++;
                playCorrectSound();
            } else {
                displayMessage('Incorrect. Try again or use the hint.', 'error');
                playThunderSound();
            }
            // Temporarily disable buttons to prevent multiple clicks
            const buttons = document.querySelectorAll('#options button');
            buttons.forEach(button => button.disabled = true);

            setTimeout(() => {
                currentLevel++;
                showLevel();
            }, 1500);
        }

        function displayMessage(message, type = 'info') {
            const messageElement = document.createElement('p');
            messageElement.textContent = message;
            messageElement.style.marginTop = '15px';
            messageElement.style.fontWeight = 'bold';
            if (type === 'success') {
                messageElement.style.color = '#1b5e20';
            } else if (type === 'error') {
                messageElement.style.color = '#c62828';
                startRain(); // Start rain on error
                sunFall(); // Sun falls on error
                setTimeout(stopRain, 3000); // Stop rain after 3 seconds
                setTimeout(resetSun, 3000); // Reset sun after 3 seconds
            } else if (type === 'info') {
                messageElement.style.color = '#004d80';
            }
            log.appendChild(messageElement);
            log.scrollTop = log.scrollHeight; // Scroll to bottom
        }

        function appendHintButton(hintText) {
            const hintBtn = document.createElement('button');
            hintBtn.textContent = 'Hint';
            hintBtn.className = 'hint-btn'; // You might want to style this differently
            hintBtn.onclick = () => displayMessage(`Hint: ${hintText}`, 'info');
            log.appendChild(hintBtn);
        }

        function playCorrectSound() {
            correctSound.currentTime = 0;
            correctSound.play();
        }

        function playThunderSound() {
            thunderSound.currentTime = 0;
            thunderSound.play();
        }

        function playAwesomeChoiceSound() {
            awesomeChoice.currentTime = 0;
            awesomeChoice.play();
        }

        function showVictoryScreen() {
            log.classList.add('hidden');
            controlButtons.classList.add('hidden');
            monikatChatContainer.style.display = 'none'; // Hide chat at the end

            finalScoreSpan.textContent = score;
            totalQuestionsSpan.textContent = levels.length;
            certificateDiv.classList.remove('hidden');

            victory.classList.remove('hidden');
            victory.textContent = `🎊 Quest Complete! You've learned a lot about Oracle Cloud and Java! 🎊`;
            confetti({
                particleCount: 150,
                spread: 180,
                origin: { y: 0.6 }
            });
            // Stop background music and play awesome choice sound for victory
            bgMusic.pause();
            bgMusic.currentTime = 0;
            sunnySound.pause();
            sunnySound.currentTime = 0;
            playAwesomeChoiceSound();
        }

        function restartGame() {
            currentLevel = 0;
            score = 0;
            log.innerHTML = '';
            victory.classList.add('hidden');
            certificateDiv.classList.add('hidden'); // Hide certificate on restart
            startBtn.classList.remove('hidden');
            controlButtons.style.display = 'none';
            monikatChatLog.innerHTML = `<p><strong>Monikat:</strong> Welcome to Monica's Cloud Quest! Ask me anything about Oracle Cloud, Java, or the game! Try typing 'hello'.</p>`;
            chatHistory = [];
            stopRain();
            resetSun();
            bgMusic.pause();
            bgMusic.currentTime = 0; // Reset music
            sunnySound.pause();
            sunnySound.currentTime = 0;
        }

        function updateButtons() {
            // No specific button state changes needed here for now,
            // but this function is a placeholder for future enhancements.
        }

        // Event Listeners
        startBtn.addEventListener('click', () => {
            startBtn.classList.add('hidden');
            showLevel();
            bgMusic.volume = 0.05; // Set a low volume for background music
            bgMusic.play();
            sunnySound.volume = 0.15;
            sunnySound.play();
        });

        refreshBtn.addEventListener('click', restartGame);

        backBtn.addEventListener('click', () => {
            if (currentLevel > 0) {
                currentLevel--;
                // If going back from a demo or chat level, don't decrement score
                // unless you specifically want to track errors or re-attempts.
                // For now, assume going back is just navigation.
                showLevel();
            } else {
                displayMessage("You're at the beginning of the quest!", 'info');
            }
        });

    </script>
</body>
</html>