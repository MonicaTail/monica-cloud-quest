<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>‚òÅÔ∏è Monica's Cloud Quest ‚òÅÔ∏è</title>
  <link rel="icon" href="favicon.ico" type="image/x-icon" />
  <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />
  <style>
    /* === Page Styles === */
    body {
      background: linear-gradient(to bottom, #fff9db, #f7e7a7); /* Pale yellow sunny start */
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      text-align: center;
      padding: 50px;
      overflow-x: hidden;
      color: #003366;
      user-select: none;
      position: relative;
      min-height: 100vh;
      transition: background 1s ease;
    }

    body.rainy {
      background: linear-gradient(to bottom, #546a7b, #a0b8ca);
      filter: brightness(0.85);
    }

    body.sunny {
      background: linear-gradient(to bottom, #fff9db, #f7e7a7);
      filter: brightness(1.1);
    }

    h1 {
      font-size: 3em;
      margin-bottom: 20px;
      animation: popIn 2s ease;
      text-shadow: 0 0 15px #4fa1d8;
    }

    @keyframes popIn {
      0% { transform: scale(0.5); opacity: 0; }
      100% { transform: scale(1); opacity: 1; }
    }

    /* === Buttons === */
    button {
      padding: 14px 28px;
      margin: 12px;
      font-size: 16px;
      background: linear-gradient(145deg, #a7d7f9, #89c2f7);
      color: #003366;
      border: 2px solid #4fa1d8;
      border-radius: 18px;
      cursor: pointer;
      transition: all 0.3s ease-in-out;
      box-shadow: 0 5px 12px rgba(0, 0, 0, 0.15);
      font-weight: 600;
      letter-spacing: 0.8px;
      text-transform: uppercase;
      user-select: none;
      position: relative;
      overflow: hidden;
    }

    button:hover:not(:disabled) {
      background: linear-gradient(145deg, #89c2f7, #a7d7f9);
      transform: scale(1.1) rotate(-1deg);
      box-shadow: 0 10px 25px rgba(0, 119, 204, 0.6);
    }

    button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
      box-shadow: none;
      color: #666;
    }

    /* Back button styling (different color) */
    .back-btn {
      background: #bbb !important;
      color: #222 !important;
    }

    /* Refresh button styling */
    .refresh-btn {
      background: #ffd54f !important;
      color: #333 !important;
      border-color: #ffca28 !important;
    }

    /* === Hidden === */
    .hidden {
      display: none;
    }

    /* === Log Area === */
    #log {
      text-align: left;
      margin-top: 30px;
      background: transparent;
      padding: 25px 30px;
      border-radius: 15px;
      max-width: 840px;
      margin-left: auto;
      margin-right: auto;
      box-shadow: none;
      min-height: 220px;
      font-size: 1.1em;
      color: #003366;
      user-select: text;
      position: relative;
      z-index: 10;
    }

    /* === Victory Message === */
    .victory {
      color: #1b5e20;
      font-weight: bold;
      margin-top: 40px;
      font-size: 1.8em;
      text-shadow: 0 0 15px #00cc00;
      animation: glow 1.5s ease-in-out infinite alternate;
      max-width: 840px;
      margin-left: auto;
      margin-right: auto;
      background: #e6ffe6cc;
      padding: 30px;
      border-radius: 18px;
      box-shadow: 0 0 30px #00cc00aa;
      position: relative;
      overflow: hidden;
      z-index: 10;
    }

    @keyframes glow {
      from {
        text-shadow: 0 0 15px #00cc00, 0 0 25px #00cc00;
      }
      to {
        text-shadow: 0 0 25px #00ff00, 0 0 35px #00ff00;
      }
    }

    /* === Avatar Selection === */
    .avatar-selection {
      display: flex;
      justify-content: center;
      gap: 40px;
      flex-wrap: wrap;
      margin: 35px auto 15px auto;
      position: relative;
      z-index: 10;
    }

    .avatar {
      cursor: pointer;
      border: 5px solid transparent;
      border-radius: 50%;
      width: 140px;
      height: 140px;
      transition: all 0.35s ease-in-out;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
      filter: drop-shadow(0 0 3px #77bfff);
      user-select: none;
      position: relative;
      background: #d0e8ff;
    }

    .avatar:hover, .avatar.selected {
      transform: scale(1.15) rotate(-5deg);
      border-color: #0077cc;
      box-shadow: 0 0 28px rgba(0, 119, 204, 0.85);
      filter: drop-shadow(0 0 12px #3399ff);
      background: linear-gradient(145deg, #89c2f7, #a7d7f9);
    }

    /* === Character Message === */
    #character-message {
      font-style: italic;
      color: #004d80;
      margin-top: 15px;
      font-size: 1.15em;
      min-height: 40px;
      max-width: 720px;
      margin-left: auto;
      margin-right: auto;
      user-select: none;
      transition: all 0.3s ease-in-out;
      position: relative;
      z-index: 10;
    }

    /* === Option Buttons === */
    #options button {
      display: block;
      width: 100%;
      max-width: 400px;
      margin: 12px auto;
      font-size: 1.1em;
      border-radius: 22px;
      background: linear-gradient(135deg, #9cd3f5, #5fa9f5);
      color: #002244;
      font-weight: 700;
      letter-spacing: 0.9px;
      box-shadow: 0 6px 18px rgba(45, 118, 205, 0.7);
      transition: transform 0.25s ease, box-shadow 0.25s ease;
      user-select: none;
      position: relative;
      overflow: hidden;
    }

    #options button:hover:not(:disabled) {
      transform: scale(1.15) rotate(1deg);
      box-shadow: 0 10px 28px rgba(0, 120, 255, 0.9);
      background: linear-gradient(135deg, #5fa9f5, #9cd3f5);
      color: #001a3c;
    }

    /* === Interactive Cloud Button (replaces blue dot) === */
    .cloud-button {
      font-size: 4rem;
      cursor: pointer;
      background: transparent;
      border: none;
      transition: transform 0.3s ease, filter 0.3s ease;
      user-select: none;
      color: #3399ff;
      filter: drop-shadow(0 0 8px #66b3ff);
      margin: 10px auto 30px auto;
      display: inline-block;
      position: relative;
      z-index: 10;
    }

    .cloud-button:hover {
      transform: scale(1.3) rotate(-10deg);
      color: #66ccff;
      filter: drop-shadow(0 0 20px #99ddff);
    }

    /* === Floating Clouds with words at top === */
    .floating-clouds {
      position: fixed;
      top: 10px;
      left: 0;
      width: 100%;
      height: 50px;
      pointer-events: none;
      overflow: visible;
      z-index: 5;
    }

    .floating-clouds .cloud {
      position: absolute;
      background: #ffffffcc;
      border-radius: 50% / 60%;
      padding: 10px 25px;
      font-weight: bold;
      color: #336699;
      box-shadow: 0 0 15px #ccc;
      animation: floatClouds 6s ease-in-out infinite alternate;
      font-size: 1.2rem;
      user-select: none;
      filter: drop-shadow(0 0 6px #a0c8ff);
      cursor: default;
      white-space: nowrap;
    }

    .floating-clouds .cloud:nth-child(odd) {
      animation-duration: 8s;
    }

    .floating-clouds .cloud:nth-child(1) { top: 5px; left: 6%; }
    .floating-clouds .cloud:nth-child(2) { top: 12px; left: 23%; }
    .floating-clouds .cloud:nth-child(3) { top: 8px; left: 38%; }
    .floating-clouds .cloud:nth-child(4) { top: 5px; left: 52%; }
    .floating-clouds .cloud:nth-child(5) { top: 12px; left: 68%; }
    .floating-clouds .cloud:nth-child(6) { top: 8px; left: 83%; }

    @keyframes floatClouds {
      0% { transform: translateX(0); }
      100% { transform: translateX(50px); }
    }

    /* === Raindrops container */
    #rain {
      pointer-events: none;
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      overflow: hidden;
      z-index: 9999;
      mix-blend-mode: screen;
    }

    .raindrop {
      position: absolute;
      bottom: 100%;
      width: 2px;
      height: 15px;
      background: #a3c1e0cc;
      animation: fall linear infinite;
      opacity: 0.6;
      border-radius: 50%;
      filter: drop-shadow(0 0 3px #a0b8ca);
    }

    @keyframes fall {
      to {
        transform: translateY(100vh);
        opacity: 0;
      }
    }

/* === Sun (Simplified) === */
#sunrays {
  position: fixed;
  top: 70px; /* Adjusted to move the sun down a bit */
  right: 20px;
  width: 100px;
  height: 100px;
  background: #ffcc00;
  border-radius: 50%;
  box-shadow: 0 0 10px rgba(255, 204, 0, 0.7);
  z-index: 9999;
  pointer-events: none;
}


    /* === Butterflies container === */
    #butterflies {
      position: fixed;
      top: 10%;
      left: 0;
      width: 100%;
      height: 80vh;
      pointer-events: none;
      overflow: visible;
      z-index: 1000;
    }

    /* Single butterfly */
    .butterfly {
      position: absolute;
      width: 40px;
      height: 40px;
     background: url('https://cdn-icons-png.flaticon.com/512/5426/5426522.png') no-repeat center center / contain;
      animation: flyAround 12s linear infinite;
      opacity: 0.85;
      filter: drop-shadow(0 0 4px #faa);
      user-select: none;
      pointer-events: none;
    }

    @keyframes flyAround {
      0% { transform: translate(0, 0) rotate(0deg); }
      25% { transform: translate(30vw, -10vh) rotate(45deg); }
      50% { transform: translate(60vw, 5vh) rotate(0deg); }
      75% { transform: translate(40vw, 15vh) rotate(-45deg); }
      100% { transform: translate(0, 0) rotate(0deg); }
    }

  </style>
</head>
<body class="sunny">

  <!-- Floating clouds with words -->
  <div class="floating-clouds" aria-hidden="true">
    <div class="cloud">Java</div>
    <div class="cloud">Git</div>
    <div class="cloud">Oracle</div>
    <div class="cloud">Ports</div>
    <div class="cloud">NetBeans</div>
    <div class="cloud">TigerVNC</div>
  </div>

  <h1>‚òÅÔ∏è Monica's Cloud Quest ‚òÅÔ∏è</h1>

  <!-- üéµ Background music -->
  <audio id="bg-music" loop preload="auto" volume="0.05">
    <source src="https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3" type="audio/mpeg" />
  </audio>

  <!-- Correct and wrong sounds -->
  <audio id="correct-sound" src="https://actions.google.com/sounds/v1/cartoon/wood_plank_flicks.ogg" preload="auto"></audio>
<audio id="thunder-sound" src="https://actions.google.com/sounds/v1/cartoon/cartoon_boing.ogg" preload="auto"></audio>
  <audio id="awesome-choice" src="https://actions.google.com/sounds/v1/cartoon/concussive_hit_guitar_boing.ogg" preload="auto"></audio>

  <!-- Rain sound -->
  <audio id="rain-sound" src="https://cdn.pixabay.com/download/audio/2021/08/04/audio_3a1c1dd90d.mp3?filename=rain-loop-11488.mp3" loop preload="auto"></audio>

  <!-- Sunny sound -->
  <audio id="sunny-sound" src="https://cdn.pixabay.com/download/audio/2023/08/30/audio_4e98b46e01.mp3?filename=happy-music-12666.mp3" loop preload="auto"></audio>

  <!-- Raindrops container -->
  <div id="rain" aria-hidden="true"></div>

  <!-- Sun rays -->
  <div id="sunrays" aria-hidden="true" aria-label="Sun rays">
    <!-- 12 rays -->
    <div class="ray" style="transform: rotate(0deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(30deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(60deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(90deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(120deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(150deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(180deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(210deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(240deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(270deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(300deg) translateX(90px);"></div>
    <div class="ray" style="transform: rotate(330deg) translateX(90px);"></div>
  </div>

  <!-- Butterflies container -->
  <div id="butterflies" aria-hidden="true"></div>

  <!-- Interactive Log area -->
  <div id="log" role="main" aria-live="polite" aria-atomic="true" tabindex="0"></div>

  <!-- Victory message -->
  <div class="victory hidden" id="victory" role="alert" aria-live="assertive"></div>

  <!-- Cloud button to start -->
  <button id="start-btn" class="cloud-button" aria-label="Start the game">‚òÅÔ∏è Start</button>

  <!-- Back and Refresh buttons -->
  <div id="control-buttons" style="margin-top: 25px; display:none;">
    <button id="back-btn" class="back-btn" aria-label="Go back to previous question">Back</button>
    <button id="refresh-btn" class="refresh-btn" aria-label="Restart the game">Restart</button>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
  <script>
    // === Variables & Elements ===
    const log = document.getElementById('log');
    const victory = document.getElementById('victory');
    const startBtn = document.getElementById('start-btn');
    const backBtn = document.getElementById('back-btn');
    const refreshBtn = document.getElementById('refresh-btn');
    const controlButtons = document.getElementById('control-buttons');

    const bgMusic = document.getElementById('bg-music');
    const correctSound = document.getElementById('correct-sound');
    const thunderSound = document.getElementById('thunder-sound');
    const awesomeChoice = document.getElementById('awesome-choice');
    const rainSound = document.getElementById('rain-sound');
    const sunnySound = document.getElementById('sunny-sound');

    const rainContainer = document.getElementById('rain');
    const butterfliesContainer = document.getElementById('butterflies');

    let currentLevel = 0;
    let score = 0;

    // Keep track if rain effect active
    let isRaining = false;

    // === Original and added questions combined ===
    const levels = [
      {
        question: "Which is the best way to start with Oracle Cloud?",
        answers: [
          { text: "Use Facebook Login", correct: false },
          { text: "Create an Oracle Cloud account", correct: true },
          { text: "Download Oracle NetBeans", correct: false },
          { text: "Use AWS instead", correct: false }
        ],
        hint: "You need an official Oracle account first."
      },
      {
        question: "Why did Monica create 2 VMs in Oracle Cloud?",
        answers: [
          { text: "First VM was too small to run everything", correct: true },
          { text: "Wanted a backup VM", correct: false },
          { text: "Just to experiment with multiple VMs", correct: false },
          { text: "Because of cost savings", correct: false }
        ],
        hint: "Capacity was the issue."
      },
      {
        question: "What remote desktop tool did Monica install on her VMs?",
        answers: [
          { text: "TigerVNC", correct: true },
          { text: "TeamViewer", correct: false },
          { text: "AnyDesk", correct: false },
          { text: "Remote Desktop Protocol (RDP)", correct: false }
        ],
        hint: "Starts with 'Tiger'."
      },
      {
        question: "How did Monica handle opening ports in Oracle Cloud?",
        answers: [
          { text: "Added specific ports for services", correct: true },
          { text: "Blocked all ports for security", correct: false },
          { text: "Left default ports open", correct: false },
          { text: "Didn't configure ports", correct: false }
        ],
        hint: "She customized port access."
      },
      {
        question: "Which tools did Monica learn to install on her VMs?",
        answers: [
          { text: "TigerVNC, Git, Java Learning", correct: true },
          { text: "Docker, Kubernetes", correct: false },
          { text: "Photoshop, Illustrator", correct: false },
          { text: "VMware, Hyper-V", correct: false }
        ],
        hint: "Includes version control and remote desktop."
      },
      {
        question: "Monica learned to code Java. Which IDE is popular for Java development?",
        answers: [
          { text: "NetBeans", correct: true },
          { text: "Visual Studio Code", correct: false },
          { text: "Sublime Text", correct: false },
          { text: "PyCharm", correct: false }
        ],
        hint: "Oracle owns this IDE."
      },
      {
        question: "Let's try a simple Java demo! Type exactly: System.out.println(\"Hello, Oracle!\");",
        demo: true,
        hint: "Match capitalization, punctuation exactly.",
        correctDemoInput: 'System.out.println("Hello, Oracle!");',
        demoSuccessMsg: "Great job! You've run your first Java print statement!"
      }
    ];

    // === Rain effect: create raindrops ===
    function createRainDrops(numDrops = 50) {
      rainContainer.innerHTML = '';
      for (let i = 0; i < numDrops; i++) {
        const drop = document.createElement('div');
        drop.classList.add('raindrop');
        drop.style.left = Math.random() * 100 + 'vw';
        drop.style.animationDuration = (0.7 + Math.random() * 0.8) + 's';
        drop.style.animationDelay = (Math.random() * 5) + 's';
        drop.style.opacity = (0.3 + Math.random() * 0.7).toFixed(2);
        drop.style.width = (1 + Math.random() * 3) + 'px';
        drop.style.height = (8 + Math.random() * 12) + 'px';
        rainContainer.appendChild(drop);
      }
    }

    // Start rain
    function startRain() {
      if (!isRaining) {
        createRainDrops(80);
        rainSound.volume = 0.15;
        rainSound.play();
        isRaining = true;
        document.body.classList.add('rainy');
        document.body.classList.remove('sunny');
        sunnySound.pause();
      }
    }

    // Stop rain
    function stopRain() {
      if (isRaining) {
        rainContainer.innerHTML = '';
        rainSound.pause();
        isRaining = false;
        document.body.classList.remove('rainy');
        document.body.classList.add('sunny');
        sunnySound.volume = 0.15;
        sunnySound.play();
      }
    }

    // === Create butterflies and animate ===
    function createButterflies(num = 6) {
      butterfliesContainer.innerHTML = '';
      for (let i = 0; i < num; i++) {
        const butterfly = document.createElement('div');
        butterfly.classList.add('butterfly');
        // Random start position and delay for smooth flying effect
        butterfly.style.top = `${Math.random() * 70 + 10}vh`;
        butterfly.style.left = `${Math.random() * 100}vw`;
        butterfly.style.animationDelay = `${Math.random() * 12}s`;
        butterfliesContainer.appendChild(butterfly);
      }
    }

    createButterflies();

    // === Show current question or demo ===
    function showLevel() {
      // Reset rain & sounds
      stopRain();

      // Show back and refresh buttons except for first question
      controlButtons.style.display = currentLevel === 0 ? 'none' : 'block';

      log.innerHTML = '';
      victory.classList.add('hidden');

      if (currentLevel >= levels.length) {
        endGame();
        return;
      }

      const level = levels[currentLevel];

      const questionEl = document.createElement('h2');
      questionEl.textContent = level.question;
      log.appendChild(questionEl);

      // Show hint
      const hintEl = document.createElement('p');
      hintEl.style.fontStyle = 'italic';
      hintEl.style.color = '#666';
      hintEl.textContent = 'Hint: ' + level.hint;
      log.appendChild(hintEl);

      if (level.demo) {
        // Demo input box for Java print statement
        const input = document.createElement('input');
        input.type = 'text';
        input.style.fontSize = '1.1em';
        input.style.width = '85%';
        input.style.padding = '10px';
        input.setAttribute('aria-label', 'Java demo input');
        input.value = '';
        log.appendChild(input);

        const runBtn = document.createElement('button');
        runBtn.textContent = 'Run Code';
        runBtn.style.marginTop = '12px';
        runBtn.addEventListener('click', () => {
          const userInput = input.value.trim();
          if (userInput === level.correctDemoInput) {
            awesomeChoice.play();
            alert(level.demoSuccessMsg);
            score++;
            currentLevel++;
            showLevel();
          } else {
            thunderSound.play();
            startRain();
            alert("Oops, that's not quite right. Try again!");
          }
        });
        log.appendChild(runBtn);

        // Enter key runs code
        input.addEventListener('keydown', e => {
          if (e.key === 'Enter') runBtn.click();
        });

      } else {
        // Show answer options as buttons
        const optionsDiv = document.createElement('div');
        optionsDiv.id = 'options';

        level.answers.forEach(answer => {
          const btn = document.createElement('button');
          btn.textContent = answer.text;
          btn.setAttribute('aria-label', `Answer option: ${answer.text}`);
          btn.addEventListener('click', () => {
            if (answer.correct) {
              correctSound.play();
              score++;
              stopRain();
              btn.style.background = '#00cc44';
              setTimeout(() => {
                currentLevel++;
                showLevel();
              }, 1100);
            } else {
              thunderSound.play();
              startRain();
              btn.style.background = '#cc3300';
              btn.disabled = true;
              // Let user retry or choose another option without locking UI
            }
          });
          optionsDiv.appendChild(btn);
        });
        log.appendChild(optionsDiv);
      }
    }

    // === End of game: show victory and confetti ===
    function endGame() {
      log.classList.add('hidden');
      victory.classList.remove('hidden');
      victory.innerHTML = `
        üéâ Congratulations! You completed Monica's Cloud Quest with a score of ${score} out of ${levels.length}! ‚òÅÔ∏èüåà
        <br><br>
        <strong>Message to Ben:</strong> Thanks for inspiring me to create this learning journey! üöÄ
      `;
      bgMusic.pause();
      rainSound.pause();
      sunnySound.pause();

      // Fire confetti for 6 seconds
      const duration = 6 * 1000;
      const end = Date.now() + duration;

      (function frame() {
        confetti({
          particleCount: 6,
          angle: 60,
          spread: 70,
          origin: { x: 0 }
        });
        confetti({
          particleCount: 6,
          angle: 120,
          spread: 70,
          origin: { x: 1 }
        });

        if (Date.now() < end) {
          requestAnimationFrame(frame);
        }
      })();

      // Show refresh button only
      controlButtons.style.display = 'block';
      backBtn.style.display = 'none';
    }

    // === Event Listeners ===

    // Start game
    startBtn.addEventListener('click', () => {
      startBtn.classList.add('hidden');
      log.classList.remove('hidden');
      victory.classList.add('hidden');
      score = 0;
      currentLevel = 0;
      bgMusic.volume = 0.05; // Lower volume
      bgMusic.play();
      sunnySound.volume = 0.1;
      sunnySound.play();
      showLevel();
    });

    // Back button to go back one question
    backBtn.addEventListener('click', () => {
      if (currentLevel > 0) {
        currentLevel--;
        showLevel();
      }
    });

    // Refresh button to restart game fully
    refreshBtn.addEventListener('click', () => {
      score = 0;
      currentLevel = 0;
      victory.classList.add('hidden');
      log.classList.remove('hidden');
      startBtn.classList.add('hidden');
      bgMusic.volume = 0.05;
      bgMusic.play();
      sunnySound.volume = 0.1;
      sunnySound.play();
      showLevel();
    });

    // Accessibility: focus log area after each level
    const observer = new MutationObserver(() => {
      log.focus();
    });
    observer.observe(log, { childList: true });

  </script>

</body>
</html>